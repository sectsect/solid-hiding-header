{
  // Configuration for JavaScript files
  "extends": ["airbnb-base", "plugin:prettier/recommended"],
  "rules": {
    "prettier/prettier": "error"
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`
      }
    }
  },
  "overrides": [
    // Configuration for TypeScript files
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "plugins": [
        "react",
        "jsx-a11y",
        "@typescript-eslint",
        "solid",
        "unused-imports",
        "tailwindcss",
        // "simple-import-sort",
        "eslint-plugin-tsdoc",
        "import",
        "prettier"
      ],
      "extends": [
        "airbnb-typescript/base",
        "plugin:@typescript-eslint/recommended",
        "plugin:solid/typescript",
        "plugin:jsx-a11y/recommended",
        "plugin:tailwindcss/recommended",
        "plugin:prettier/recommended"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "rules": {
        "prettier/prettier": "error",
        // "react/destructuring-assignment": "off", // Vscode doesn't support automatically destructuring, it's a pain to add a new variable
        "jsx-a11y/anchor-is-valid": "off", // Next.js use his own internal link system
        "jsx-a11y/label-has-associated-control": [
          2,
          {
            "assert": "either" // either check for `htmlFor` or `nesting`
          }
        ],
        // "react/require-default-props": "off", // Allow non-defined react props as undefined
        // "react/jsx-props-no-spreading": "off", // _app.tsx uses spread operator and also, react-hook-form
        // // "react-hooks/exhaustive-deps": "off", // Incorrectly report needed dependency with Next.js router
        // "react/function-component-definition": [
        //   2,
        //   {
        //     "namedComponents": "arrow-function",
        //     "unnamedComponents": "arrow-function"
        //   }
        // ],
        // "react/no-danger": "off", // Allow dangerouslySetInnerHTML
        // "import/extensions": "off",
        // "import/extensions": [
        //   "error",
        //   "never",
        //   {
        //     "pattern": {
        //       "jsx": "never",
        //       "tsx": "never"
        //     }
        //   }
        // ],
        "import/order": [
          "error",
          {
            "groups": ["builtin", "external", "internal"],
            "pathGroups": [
              {
                "pattern": "solid-js",
                "group": "external",
                "position": "before"
              }
            ],
            "pathGroupsExcludedImportTypes": ["solid-js"],
            "newlines-between": "always",
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true
            }
          }
        ],
        "@typescript-eslint/comma-dangle": "off", // Avoid conflict rule between Eslint and Prettier
        "@typescript-eslint/consistent-type-imports": "error", // Ensure `import type` is used when it's necessary
        "import/prefer-default-export": "off", // Named export is easier to refactor automatically
        // "simple-import-sort/imports": "error", // Import configuration for `eslint-plugin-simple-import-sort`
        // "simple-import-sort/exports": "error", // Export configuration for `eslint-plugin-simple-import-sort`
        "@typescript-eslint/no-unused-vars": "off",
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_"
          }
        ],
        "no-underscore-dangle": "off", // We use _id in our database
        "solid/no-innerhtml": "off",
        "tailwindcss/no-custom-classname": "off",
        "tsdoc/syntax": "warn"
      }
    },
    // Configuration for testing
    {
      "files": ["**/*.test.ts", "**/*.test.tsx"],
      "plugins": ["jest", "jest-formatting", "testing-library", "jest-dom"],
      "extends": [
        "plugin:jest/recommended",
        "plugin:jest-formatting/recommended",
        // "plugin:testing-library/react",
        "plugin:jest-dom/recommended"
      ]
    },
    // Configuration for e2e testing (Cypress)
    {
      "files": ["**/*.cy.ts"],
      "plugins": ["cypress"],
      "extends": ["plugin:cypress/recommended"],
      "parserOptions": {
        "project": "./cypress/tsconfig.json"
      }
    }
  ]
}
