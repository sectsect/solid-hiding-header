name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    # To use Turborepo Remote Caching, set the following environment variables for the job.
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup pnpm 8
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v2
        with:
          node-version: 20.x

      - name: Install Dependencies
        run: pnpm i --frozen-lockfile

      - name: Build Packages
        run: pnpm build

      - name: Run Tests
        run: pnpm test

      - name: Run Test Coverage
        run: pnpm coverage

      - name: Install Playwright Browsers
        run: pnpm dlx playwright install --with-deps

      - name: Run E2E Tests
        run: pnpm test:e2e
      
      # - name: Upload app coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     files: ./apps/solidjs-boilerplate/coverage/coverage-final.json
      #     flags: solidjs-boilerplate
      #     token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./packages/solid-hiding-header/coverage/coverage-final.json
          flags: solid-hiding-header
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm release
          commit: 'chore: release package(s)'
          title: 'chore: release package(s)'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # - name: Send a Slack notification if a publish happens
      #   if: steps.changesets.outputs.published == 'true'
      #   # You can do something when a publish happens.
      #   run: my-slack-bot send-notification --message "A new version of ${GITHUB_REPOSITORY} was published!"
